{"version":3,"sources":["resources/bg-img.png","main/components/CtaBox/train/Train.js","main/components/CtaBox/CtaBox.js","main/components/WeatherBox/forecast/Forecast.js","main/components/WeatherBox/WeatherBox.js","main/components/TimeBlock/TimeBlock.js","main/components/DiscordBox/message/Message.js","main/components/DiscordBox/DiscordBox.js","app/App.js","main/util/serviceWorker.js","index.js"],"names":["module","exports","Train","props","direction","fadeIn","useState","styled","div","keyframes","Bounce","setBounce","first","setFirst","update","fadeOut","css","useEffect","interval","setInterval","clearInterval","className","style","backgroundColor","trainInfo","colorHex","dest","substring","eta","color","CtaBox","trains","setTrains","error","setError","isLoaded","setIsLoaded","doStuff","url","stop","process","fetch","then","res","json","data","ex","undefined","push","map","t","key","arrTime","Forecast","bg","forecast","min_temp","max_temp","format","tz","forecast_date","WeatherBox","forecasts","setForecasts","city","state","dir","TimeBlock","Date","toLocaleString","curTime","setCurTime","date","Message","console","log","message","from","ts","imageURL","imageUrl","DiscordBox","messages","setMessages","sock","SockJS","onopen","send","onmessage","e","newMsg","JSON","parse","length","shift","err","onclose","readyState","m","additionalData","App","middle","center","around","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,oC,2mBCkD5BC,MA1Cf,SAAeC,GACX,IAAIC,EACJA,EAAWC,SAFM,MAGSC,mBAASC,IAAOC,IAAP,IAA2BC,YAA3B,IAAuCL,KAHzD,mBAGZM,EAHY,KAGJC,EAHI,OAIOL,oBAAS,GAJhB,mBAIZM,EAJY,KAILC,EAJK,KAKjB,SAASC,IACL,IAAa,IAAVF,EAAgB,CACfR,EAAWW,UAEXJ,EAAUJ,IAAOC,IAAP,KADQ,SAAAL,GAAK,OAAGa,YAAH,IAAYP,YAAZ,IAAwBL,QAKnDS,GAAS,GAab,OAXAI,qBAAU,WACN,IAAMC,EAAWC,aAAY,WAC1BP,GAAQ,EACPE,MACD,OAEH,OADAA,IACO,kBAAMM,cAAcF,MAE5B,IAIC,kBAACR,EAAD,KAEI,yBAAKW,UAAU,OAAOC,MAAO,CAACC,gBAAgBpB,EAAMqB,UAAUC,WACzDtB,EAAMqB,UAAUE,KAAKC,UAAU,IAChC,yBAAKN,UAAU,OACVlB,EAAMqB,UAAUI,KAErB,yBAAKP,UAAU,cACVlB,EAAMqB,UAAUK,MADrB,kBC4BDC,MAjEf,SAAgB3B,GAAQ,IAAD,EACSG,mBAAS,IADlB,mBACZyB,EADY,KACJC,EADI,OAEO1B,mBAAS,IAFhB,mBAEZ2B,EAFY,KAELC,EAFK,OAGa5B,oBAAS,GAHtB,mBAGZ6B,EAHY,KAGFC,EAHE,KA+CnB,OA3CAnB,qBAAU,WACN,SAASoB,IACL,IAAIC,EAEAA,EADa,OAAdnC,EAAMoC,KAA6B,OAAdpC,EAAM0B,MACvB,UAAMW,0DAAN,iCAA4DrC,EAAMoC,KAAlE,kBAAgFpC,EAAM0B,OAEtF,UAAMW,0DAAN,oBAEPC,MAAMH,GACDI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAGF,IAAIC,EAAK,QACeC,IAApBF,EAAK,WACLX,EAAS,kBAETY,EAAGE,KAAKH,EAAK,iBACWE,IAApBF,EAAK,YACLC,EAAGE,KAAKH,EAAK,iBAEOE,IAApBF,EAAK,YACLC,EAAGE,KAAKH,EAAK,iBAEOE,IAApBF,EAAK,YACLC,EAAGE,KAAKH,EAAK,YAEjBb,EAAU,IACVI,GAAY,GACZJ,EAAUc,OAI1BT,IACA,IAAMnB,EAAWC,aAAY,WACzBe,EAAS,IAETG,MAED,KACH,OAAO,kBAAMjB,cAAcF,MAE5B,IACW,KAAVe,EACO,yBAAKZ,UAAU,SAASY,GAE1BE,EAIG,6BACKJ,EAAOkB,KAAI,SAAAC,GAAC,OACT,kBAAC,EAAD,CAAOC,IAAKD,EAAEE,QAAS5B,UAAW0B,QALvC,4C,4bCOJG,MApDf,SAAkBlD,GACd,IAAIC,EACJA,EAAWC,SAFS,IAuBhBiD,EAvBgB,EAGMhD,mBAASC,IAAOC,IAAP,IAA2BC,YAA3B,IAAuCL,KAHtD,mBAGfM,EAHe,KAGPC,EAHO,OAIIL,oBAAS,GAJb,mBAIfM,EAJe,KAIRC,EAJQ,KAKpB,SAASC,IACL,IAAa,IAAVF,EAAgB,CACfR,EAAWW,UAEXJ,EAAUJ,IAAOC,IAAP,KADQ,SAAAL,GAAK,OAAGa,YAAH,IAAYP,YAAZ,IAAwBL,SA0BvD,OArBAa,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBP,GAAQ,EACRC,GAAS,GACTC,MACA,SAEJ,OADAA,IACO,kBAAMM,cAAcF,MAE5B,IAE4B,WAA5Bf,EAAMoD,SAASA,SACdD,EAAK,SAC4B,UAA5BnD,EAAMoD,SAASA,SACpBD,EAAK,QAC4B,SAA5BnD,EAAMoD,SAASA,SACpBD,EAAK,OAC4B,SAA5BnD,EAAMoD,SAASA,WACpBD,EAAK,QAIL,kBAAC5C,EAAD,KAEI,yBAAKW,UAAS,gBAAWiC,IACpBnD,EAAMoD,SAASC,SADpB,UACuCrD,EAAMoD,SAASE,SADtD,OAEI,yBAAKpC,UAAU,QACX,kBAAC,IAAD,CAAQqC,OAAO,eAAexC,SAAU,IAAMyC,GAAG,mBAChDxD,EAAMoD,SAASK,gBAGpB,yBAAKvC,UAAU,QACVlB,EAAMoD,SAASA,aCTrBM,MA3Cf,SAAoB1D,GAAQ,IAAD,EACWG,mBAAS,IADpB,mBAChBwD,EADgB,KACLC,EADK,OAEGzD,mBAAS,IAFZ,mBAEhB2B,EAFgB,KAETC,EAFS,OAGS5B,oBAAS,GAHlB,mBAGhB6B,EAHgB,KAGNC,EAHM,KAyBvB,OArBAnB,qBAAU,WACN,SAASoB,IACL,IAAIC,EAAG,UAAME,0DAAN,uCAAkErC,EAAM6D,KAAxE,kBAAsF7D,EAAM8D,OACnGxB,MAAMH,GACDI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFkB,EAAa,IACb3B,GAAY,GACZ0B,EAAUd,KAAKH,GACfkB,GAAa,kBAAMlB,QAI/BR,IACA,IAAMnB,EAAWC,aAAY,WACzBe,EAAS,IACTG,MACD,MACH,OAAO,kBAAMjB,cAAcF,MAE5B,IACW,KAAVe,EACO,yBAAKZ,UAAU,SAASY,GAE1BE,EAIG,6BACK2B,EAAUb,KAAI,SAAAC,GAAC,OACZ,kBAAC,EAAD,CAAUC,IAAKD,EAAEU,cAAeL,SAAUL,EAAGgB,IAAK/D,EAAM+D,UAL7D,4C,cCJJC,MAxBf,SAAmBhE,GAAO,IAAD,EACOG,mBAAS8D,OAAOC,kBADvB,mBAChBC,EADgB,KACPC,EADO,KAerB,OAZAtD,qBAAU,WACN,SAASH,IACLyD,EAAWH,OAAOC,kBAEtBvD,IACA,IAAMI,EAAWC,aAAY,WACzBL,MACD,KACH,OAAO,kBAAMM,cAAcF,MAE5B,IAGC,6BACA,kBAAC,IAAD,CAAQwC,OAAO,WAAWxC,SAAU,IAAMyC,GAAG,kBAAkBa,KAAMF,IACjE,6BACA,kBAAC,IAAD,CAAQZ,OAAO,eAAexC,SAAU,IAAMyC,GAAG,kBAAkBa,KAAMF,M,wBCMtEG,MA1Bf,SAAiBtE,GAWb,OAVAuE,QAAQC,IAAI,0BACZD,QAAQC,IAAR,UAAexE,EAAMyE,QAArB,aAAiCzE,EAAM0E,KAAvC,aAAgD1E,EAAM2E,KAG3B,OAAxB3E,EAAM0C,KAAKkC,WACJ,QACA5E,EAAM0C,KAAKmC,UAKb,yBAAK3D,UAAU,WAAf,IACMlB,EAAMyE,QADZ,IAEI,yBAAKvD,UAAU,QAAf,KACOlB,EAAM0E,KACT,yBAAKxD,UAAU,QACf,6BACA,kBAAC,IAAD,CAAQmD,KAAMrE,EAAM2E,GAAIpB,OAAO,WAAWC,GAAG,oBAC7C,kBAAC,IAAD,CAASa,KAAMrE,EAAM2E,GAAIpB,OAAO,eAAeC,GAAG,wB,OC2DvDsB,MA5Ef,SAAoB9E,GAChB,IADuB,EAESG,mBAAS,IAFlB,mBAEhB4E,EAFgB,KAENC,EAFM,OAGQ7E,oBAAS,GAHjB,mBAGhB6B,EAHgB,KAInBG,GAJmB,KAIhB,UAAME,sEACT4C,EAAO,IAAIC,IAAO/C,GA6DtB,OA1DArB,qBAAU,WAIFmE,EAAKE,OAAS,WACVZ,QAAQC,IAAR,QACAS,EAAKG,KAAK,sBAIdH,EAAKI,UAAY,SAAUC,GAGvB,GAFAf,QAAQC,IAAR,WAEe,SAAXc,EAAE5C,MAA8B,sBAAX4C,EAAE5C,WACpB,GAAe,eAAX4C,EAAE5C,UACN,CACH,IAAIA,EAAO4C,EAAE5C,KACb,IACI,IAAI6C,EAASC,KAAKC,MAAM/C,GACxB6B,QAAQC,IAAIO,GACZA,EAASlC,KAAK0C,GACdhB,QAAQC,IAAIO,GACRA,EAASW,OAAS,IAClBX,EAASY,QACTpB,QAAQC,IAAIO,IAEhB,IAAIpC,EAAKoC,EACTC,EAAY,IACZA,EAAYrC,GAGd,MAAOiD,GACLrB,QAAQC,IAAI,sBACZD,QAAQC,IAAIoB,MAQxBX,EAAKY,QAAU,WACXtB,QAAQC,IAAR,SAxCJS,EAAO,IAAIC,IAAO/C,IA6CtB,IAAMpB,EAAWC,aAAY,WACzBuD,QAAQC,IAAR,2BAAgCS,EAAKa,aAE7Bb,EAAKG,KAAK,cACVb,QAAQC,IAAR,6CAAkDxC,MAE3D,MACH,OAAO,kBAAMf,cAAcF,MAC5B,IAEHwD,QAAQC,IAAI,aAER,yBAAKtD,UAAU,SACV6D,EAASjC,KAAI,SAAAiD,GAAC,OACP,kBAAC,EAAD,CAAS/C,IAAK+C,EAAEpB,GAAIF,QAASsB,EAAEtB,QAASC,KAAMqB,EAAErB,KAAMC,GAAIoB,EAAEpB,GAAIqB,eAAgBD,EAAErD,YCCvFuD,MAjEf,WAEI,OACI,yBAAK/E,UAAU,UACX,yBAAKA,UAAU,WACX,kBAAC,MAAD,CAAKgF,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKlF,UAAU,eAC/C,kBAAC,MAAD,CAAKmF,GARf,EAQwBnF,UAAU,iBACpB,yBAAKA,UAAU,OAAf,aAIJ,kBAAC,MAAD,CAAKmF,GAbf,EAawBnF,UAAU,kBACpB,yBAAKA,UAAU,OAAf,eAKR,kBAAC,MAAD,CAAKgF,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKlF,UAAU,UAC/C,kBAAC,MAAD,CAAKmF,GApBf,EAoBwBnF,UAAU,iBACpB,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAQkB,KAAK,WAAWV,MAAM,YAGtC,kBAAC,MAAD,CAAK2E,GAzBf,EAyBwBnF,UAAU,kBACpB,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAQkB,KAAK,YAAYV,MAAM,WAI3C,kBAAC,MAAD,CAAKwE,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKlF,UAAU,kBAC/C,kBAAC,MAAD,CAAKmF,GAhCf,EAgCwBnF,UAAU,iBACpB,yBAAKA,UAAU,WAAf,qBAIJ,kBAAC,MAAD,CAAKmF,GArCf,EAqCwBnF,UAAU,kBACpB,yBAAKA,UAAU,WAAf,sBAKR,kBAAC,MAAD,CAAKgF,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKlF,UAAU,aAC/C,kBAAC,MAAD,CAAKmF,GA5Cf,EA4CwBnF,UAAU,iBACpB,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAY2C,KAAK,UAAUC,MAAM,eAGzC,kBAAC,MAAD,CAAKuC,GAjDf,EAiDwBnF,UAAU,kBACpB,yBAAKA,UAAU,WACX,kBAAC,EAAD,SAIZ,kBAAC,MAAD,CAAKgF,OAAO,KAAKC,OAAO,KAAKC,OAAO,KAAKlF,UAAU,aAC/C,kBAAC,MAAD,KACI,yBAAKA,UAAU,aACX,kBAAC,EAAD,YCvDRoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEdC,OAAM,SAAAvF,GACLyC,QAAQzC,MAAMA,EAAM2C,a","file":"static/js/main.53afcfbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg-img.f373d592.png\";","import React, {useEffect, useState} from \"react\";\r\nimport './Train.css';\r\nimport styled, {css, keyframes} from 'styled-components';\r\nimport {fadeIn, fadeOut} from \"react-animations\"\r\n\r\n\r\n\r\n\r\nfunction Train(props){\r\n    let direction\r\n    direction= fadeIn;\r\n    let [Bounce, setBounce] = useState(styled.div`animation: 2s ${keyframes`${direction}`}`)\r\n    let [first, setFirst] = useState(true)\r\n    function update() {\r\n        if(first === false){\r\n            direction= fadeOut\r\n            const animation = props =>css`4s ${keyframes`${direction} ease-in`}`\r\n            setBounce(styled.div`animation: ${animation}`)\r\n\r\n            //setBounce(styled.div`animation: 4s ${keyframes`${direction}`} ease-in`)\r\n        }\r\n        setFirst(false)\r\n    };\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n           first = false\r\n            update()\r\n        }, 56500);\r\n        update()\r\n        return () => clearInterval(interval);\r\n\r\n    }, [])\r\n    //console.log(\"HELLO\")\r\n    //console.log(props)\r\n    return (\r\n        <Bounce>\r\n\r\n            <div className=\"dest\" style={{backgroundColor:props.trainInfo.colorHex}}>\r\n                {props.trainInfo.dest.substring(15)}\r\n                <div className=\"eta\">\r\n                    {props.trainInfo.eta}\r\n                </div>\r\n                <div className=\"train-line\">\r\n                    {props.trainInfo.color} Line Train\r\n                </div>\r\n            </div>\r\n        </Bounce>\r\n    )\r\n}\r\n\r\nexport default Train;","import React, {useEffect, useState} from \"react\";\r\nimport Train from \"./train/Train\";\r\n\r\n\r\n\r\nfunction CtaBox(props) {\r\n    const [trains, setTrains] = useState([])\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(() => {\r\n        function doStuff() {\r\n            let url\r\n            if(props.stop!== null & props.color!==null) {\r\n                url = `${process.env.REACT_APP_ORCHURL}/cta/train-times?name=${props.stop}&color=${props.color}`\r\n            }else{\r\n                url = `${process.env.REACT_APP_ORCHURL}/cta/train-times`\r\n            }\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    //console.log(\"here\")\r\n                    //console.log(data)\r\n                    let ex = []\r\n                    if (data[\"Train 1\"] === undefined) {\r\n                        setError(\"No trains now\")\r\n                    } else {\r\n                        ex.push(data[\"Train 1\"]);\r\n                        if (data[\"Train 2\"] !== undefined) {\r\n                            ex.push(data[\"Train 2\"]);\r\n                        }\r\n                        if (data[\"Train 3\"] !== undefined) {\r\n                            ex.push(data[\"Train 3\"]);\r\n                        }\r\n                        if (data[\"Train 4\"] !== undefined) {\r\n                            ex.push(data[\"Train 4\"]);\r\n                        }\r\n                        setTrains([]);\r\n                        setIsLoaded(true)\r\n                        setTrains(ex);\r\n                    }\r\n                })\r\n        };\r\n        doStuff();\r\n        const interval = setInterval(() => {\r\n            setError(\"\")\r\n            //setIsLoaded(false)\r\n            doStuff();\r\n            //console.log('This will run every minute!');\r\n        }, 60000);\r\n        return () => clearInterval(interval);\r\n\r\n    }, [])\r\n    if (error !== \"\") {\r\n        return <div className=\"Error\">{error}</div>\r\n    } else {\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {trains.map(t => (\r\n                        <Train key={t.arrTime} trainInfo={t}/>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default CtaBox;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport './Forecast.css';\r\nimport styled, {css, keyframes} from 'styled-components';\r\nimport {fadeIn, fadeOut} from \"react-animations\"\r\nimport ScrollAnimation from 'react-animate-on-scroll';\r\nimport Moment from \"react-moment\";\r\n\r\n;\r\n\r\n\r\n\r\nfunction Forecast(props){\r\n    let direction\r\n    direction= fadeIn\r\n    let [Bounce, setBounce] = useState(styled.div`animation: 4s ${keyframes`${direction}`} ease-in`)\r\n    let [first, setFirst] = useState(true)\r\n    function update() {\r\n        if(first === false){\r\n            direction= fadeOut\r\n            const animation = props =>css`4s ${keyframes`${direction}`} ease-in`\r\n            setBounce(styled.div`animation: ${animation}`)\r\n        }\r\n\r\n    };\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            first = false\r\n            setFirst(false)\r\n            update()\r\n        }, (60000*60)-4);\r\n        update()\r\n        return () => clearInterval(interval);\r\n\r\n    }, [])\r\n    let bg;\r\n    if(props.forecast.forecast === \"Cloudy\"){\r\n        bg = \"cloudy\"\r\n    }else if(props.forecast.forecast === \"Clear\"){\r\n        bg = \"clear\"\r\n    }else if(props.forecast.forecast === \"Rain\"){\r\n        bg = \"rain\"\r\n    }else if(props.forecast.forecast === \"Snow\"){\r\n        bg = \"snow\"\r\n    }\r\n\r\n    return (\r\n        <Bounce>\r\n\r\n            <div className={`temps ${bg}`}>\r\n                {props.forecast.min_temp}&#176; - {props.forecast.max_temp}&#176;\r\n                <div className=\"date\">\r\n                    <Moment format=\"MMMM Do YYYY\" interval={1000} tz=\"America/Chicago\">\r\n                    {props.forecast.forecast_date}\r\n                    </Moment>\r\n                </div>\r\n                <div className=\"desc\">\r\n                    {props.forecast.forecast}\r\n                </div>\r\n            </div>\r\n        </Bounce>\r\n    )\r\n}\r\n\r\nexport default Forecast;","import React, {useEffect, useState} from \"react\";\r\nimport Forecast from \"./forecast/Forecast\";\r\n\r\n\r\nfunction WeatherBox(props) {\r\n    const [forecasts, setForecasts] = useState([])\r\n    const [error, setError] = useState(\"\");\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    useEffect(() => {\r\n        function doStuff() {\r\n            let url = `${process.env.REACT_APP_ORCHURL}/weather/forecast-week?city=${props.city}&state=${props.state}`\r\n            fetch(url)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    setForecasts([]);\r\n                    setIsLoaded(true)\r\n                    forecasts.push(data)\r\n                    setForecasts(() => data);\r\n\r\n                })\r\n        };\r\n        doStuff();\r\n        const interval = setInterval(() => {\r\n            setError(\"\")\r\n            doStuff();\r\n        }, 60000*60);\r\n        return () => clearInterval(interval);\r\n\r\n    }, [])\r\n    if (error !== \"\") {\r\n        return <div className=\"Error\">{error}</div>\r\n    } else {\r\n        if (!isLoaded) {\r\n            return <div>Loading...</div>;\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {forecasts.map(t => (\r\n                        <Forecast key={t.forecast_date} forecast={t} dir={props.dir}/>\r\n                    ))}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default WeatherBox;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport \"./TimeBlock.css\"\r\n\r\nfunction TimeBlock(props){\r\n    let [curTime, setCurTime] = useState(Date().toLocaleString())\r\n\r\n    useEffect(() => {\r\n        function update() {\r\n            setCurTime(Date().toLocaleString())\r\n        };\r\n        update();\r\n        const interval = setInterval(() => {\r\n            update()\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n        <Moment format=\"h:mm:ssa\" interval={1000} tz=\"America/Chicago\" date={curTime}/>\r\n            <br/>\r\n            <Moment format=\"MMMM Do YYYY\" interval={1000} tz=\"America/Chicago\" date={curTime}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeBlock","import React from \"react\";\r\nimport './Message.css';\r\nimport Moment from \"react-moment\";\r\n\r\nfunction Message(props){\r\n    console.log(\"trying to make message\")\r\n    console.log(`${props.message}, ${props.from}, ${props.ts}`)\r\n    let img = \"no-image\";\r\n    let src;\r\n    if(props.data.imageURL !== null){\r\n        img = \"image\";\r\n        src = props.data.imageUrl\r\n\r\n    }\r\n\r\n    return (\r\n            <div className=\"message\">\r\n                \"{props.message}\"\r\n                <div className=\"from\">\r\n                    - {props.from}\r\n                    <div className=\"time\">\r\n                    <br/>\r\n                    <Moment date={props.ts} format=\"h:mm:ssa\" tz=\"America/Chicago\" />\r\n                    <Moment  date={props.ts} format=\"MMMM Do YYYY\" tz=\"America/Chicago\"/>    \r\n                  </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import SockJS from 'sockjs-client'\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Message from \"./message/Message.js\";\r\nimport './DiscordBox.css';\r\n//import {//debugLog} from \"../../util///debugLog.js\";\r\n\r\nfunction DiscordBox(props) {\r\n    let i = 0;\r\n    const [messages, setMessages] = useState([])\r\n    const [isLoaded,setIsLoaded] = useState(false)\r\n    let url = `${process.env.REACT_APP_SOCKJS}`;\r\n    let sock = new SockJS(url)\r\n\r\n    //DUMB BITCH AT LEAST YOU DIDNT PUSH THE ACTUAL URL\r\n    useEffect(() => {\r\n        let new_conn = function() {\r\n            sock = new SockJS(url);\r\n        }\r\n            sock.onopen = function () {\r\n                console.log(`OPEN`)\r\n                sock.send('display open test');\r\n                //console.log(`setting loaded to true ln22, it is ${isLoaded}`)\r\n            };\r\n\r\n            sock.onmessage = function (e) {\r\n                console.log(`Message`)\r\n                //console.log(`${e.data}`)\r\n                if (e.data === \"test\" || e.data === \"display open test\") {\r\n                } else if (e.data === \"stay alive\") {\r\n                } else {\r\n                    let data = e.data\r\n                    try {\r\n                        let newMsg = JSON.parse(data)\r\n                        console.log(messages)\r\n                        messages.push(newMsg)\r\n                        console.log(messages)\r\n                        if (messages.length > 5) {\r\n                            messages.shift()\r\n                            console.log(messages)\r\n                        }\r\n                        let ex = messages;\r\n                        setMessages([]);\r\n                        setMessages(ex)\r\n                        //setMessages(messages)\r\n                        //console.log(`setting loaded to true, it is ${isLoaded}`)\r\n                    } catch (err) {\r\n                        console.log(\"issue with message\")\r\n                        console.log(err)\r\n                        //debugLog(\"Issue with message\", false)\r\n                        //debugLog(err, true)\r\n                    }\r\n                }\r\n                //console.log(`Messages after receive length: ${messages.length}`)\r\n            }\r\n\r\n            sock.onclose = function () {\r\n                console.log(`CLOSE`)\r\n                new_conn()\r\n                //debugLog(\"sock.onClose\", true)\r\n            };\r\n\r\n        const interval = setInterval(() => {\r\n            console.log(`sock ready state ${sock.readyState}`)\r\n                    //debugLog(\"trying to send stay alive\", false)\r\n                    sock.send(\"stay alive\")\r\n                    console.log(`setting loaded to true ln79, it is ${isLoaded}`)\r\n\r\n        }, 15000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    console.log(\"returning\")\r\n    return (\r\n        <div className=\"my-bg\">\r\n            {messages.map(m => (\r\n                    <Message key={m.ts} message={m.message} from={m.from} ts={m.ts} additionalData={m.data}/>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DiscordBox","import React from 'react';\r\nimport './App.css';\r\nimport {Col, Row} from \"react-flexbox-grid\";\r\nimport CtaBox from \"../main/components/CtaBox/CtaBox\";\r\nimport { bounceInRight } from 'react-animations'\r\nimport Background from '../resources/bg-img.png';\r\nimport WeatherBox from \"../main/components/WeatherBox/WeatherBox\";\r\nimport TimeBlock from \"../main/components/TimeBlock/TimeBlock\";\r\nimport DiscordBox from \"../main/components/DiscordBox/DiscordBox\";\r\nlet num = 5\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App bg\" >\r\n            <div className=\"MainBox\">\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"TopBox-head\">\r\n                    <Col xs={num} className=\"quadrant-left\" >\r\n                        <div className=\"CTA\">\r\n                            Montrose\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={num} className=\"quadrant-right\">\r\n                        <div className=\"CTA\">\r\n                            Fullerton\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"TopBox\">\r\n                    <Col xs={num} className=\"quadrant-left\" >\r\n                        <div className=\"CTA\">\r\n                            <CtaBox stop=\"Montrose\" color=\"Brown\"/>\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={num} className=\"quadrant-right\">\r\n                        <div className=\"CTA\">\r\n                            <CtaBox stop=\"Fullerton\" color=\"Red\"/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"BottomBox-head\">\r\n                    <Col xs={num} className=\"quadrant-left\">\r\n                        <div className=\"Weather\">\r\n                            Chicago Forecast\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={num} className=\"quadrant-right\">\r\n                        <div className=\"Discord\">\r\n                            Discord Messages\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"BottomBox\">\r\n                    <Col xs={num} className=\"quadrant-left\">\r\n                        <div className=\"Weather\">\r\n                            <WeatherBox city=\"Chicago\" state=\"Illinois\"/>\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={num} className=\"quadrant-right\">\r\n                        <div className=\"Discord\">\r\n                            <DiscordBox/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row middle=\"xs\" center=\"xs\" around=\"xs\" className=\"TimeBlock\">\r\n                    <Col>\r\n                        <div className=\"TimeBlock\">\r\n                            <TimeBlock/>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './main/util/serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}